// Code generated by MockGen. DO NOT EDIT.
// Source: ./notifier.go

// Package mock_src is a generated GoMock package.
package mock_src

import (
	reflect "reflect"
	constants "clidemo/notifier/constants"

	gomock "github.com/golang/mock/gomock"
)

// MockINotifierClient is a mock of INotifierClient interface.
type MockINotifierClient struct {
	ctrl     *gomock.Controller
	recorder *MockINotifierClientMockRecorder
}

// MockINotifierClientMockRecorder is the mock recorder for MockINotifierClient.
type MockINotifierClientMockRecorder struct {
	mock *MockINotifierClient
}

// NewMockINotifierClient creates a new mock instance.
func NewMockINotifierClient(ctrl *gomock.Controller) *MockINotifierClient {
	mock := &MockINotifierClient{ctrl: ctrl}
	mock.recorder = &MockINotifierClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotifierClient) EXPECT() *MockINotifierClientMockRecorder {
	return m.recorder
}

// NotifyChannel mocks base method.
func (m *MockINotifierClient) NotifyChannel(message string, c chan constants.NotificationError) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyChannel", message, c)
}

// NotifyChannel indicates an expected call of NotifyChannel.
func (mr *MockINotifierClientMockRecorder) NotifyChannel(message, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyChannel", reflect.TypeOf((*MockINotifierClient)(nil).NotifyChannel), message, c)
}

// NotifySync mocks base method.
func (m *MockINotifierClient) NotifySync(message string) constants.NotificationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifySync", message)
	ret0, _ := ret[0].(constants.NotificationError)
	return ret0
}

// NotifySync indicates an expected call of NotifySync.
func (mr *MockINotifierClientMockRecorder) NotifySync(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySync", reflect.TypeOf((*MockINotifierClient)(nil).NotifySync), message)
}
